apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
  compileSdkVersion targetSdk
  buildToolsVersion buildTools

  defaultConfig {
    applicationId "adeln.boilerplate"

    minSdkVersion minSdk
    targetSdkVersion targetSdk

    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
    androidTest.java.srcDirs += 'src/androidTest/kotlin'
  }

  dexOptions {
    preDexLibraries = !isTravis
  }

  lintOptions {
    textReport true
    textOutput "stdout"
    disable "InvalidPackage"
  }

  productFlavors {
    dev {
      minSdkVersion 21
      multiDexEnabled true
    }
    prod {}
  }
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

  compile supportDeps.appCompat
  compile supportDeps.recyclerView
  compile supportDeps.design

  compile "io.reactivex:rxjava:1.0.14"
  compile "io.reactivex:rxandroid:1.0.1"
  compile "com.jakewharton.rxbinding:rxbinding:0.3.0"

  compile "com.squareup.sqlbrite:sqlbrite:0.4.1"
  compile 'com.squareup.flow:flow:0.12'
  compile "com.google.code.gson:gson:2.4"

  compile "com.jakewharton.timber:timber:4.1.0"
  compile "com.jakewharton.byteunits:byteunits:0.9.1"

  debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
  releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

  // domain specific
  compile "net.sourceforge.jtransforms:jtransforms:2.4.0"

  testCompile "junit:junit:4.12"
  testCompile "org.robolectric:robolectric:3.0"
  testCompile "com.squareup.assertj:assertj-android:1.1.1"

  androidTestCompile supportTestDependencies.rules
  androidTestCompile supportTestDependencies.espresso
}

// these are for suppressing gradle warnings
configurations {
  compile.exclude module: "junit"
  testCompile.exclude module: "support-annotations"
  androidTestCompile.exclude module: "support-annotations"
}

apply plugin: 'jacoco'

final jacocoExcludes = [
    '**/R*.class',
    '**/BuildConfig*',
    "**/*Package.class"
]

final unitTestTask = "testDebugUnitTest"
task jacocoReport(type: JacocoReport, dependsOn: unitTestTask) {
  group = 'Reporting'
  description = 'Generate Jacoco coverage reports after running tests.'

  reports {
    xml.enabled = true
    html.enabled = true
  }

  classDirectories = fileTree(dir: 'build/intermediates/classes/debug', excludes: jacocoExcludes)
  sourceDirectories = files("src/main/kotlin")
  executionData = files("build/jacoco/${unitTestTask}.exec")

  doFirst {
    file('build/intermediates/classes/debug').eachFileRecurse { file ->
      if (file.name.contains('$$')) {
        file.renameTo(file.path.replace('$$', '$'))
      }
    }
  }
}
